{"version":3,"sources":["webpack:///./js/novemberTimer.js","webpack:///./js/CountdownTimer.js"],"names":["novemberTimer","selector","targetDate","this","_selector","_targetDate","_timerId","_IsNoActivFlag","getDataCalc","time","Date","now","days","Math","floor","hours","mins","secs","startTimerData","setInterval","dataObj","timerRef","document","querySelector","textContent","stopTimerData","clearInterval","console","log","setTimeout"],"mappings":"sGAEMA,EAAgB,I,WCDpB,cAAsC,IAAxBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WACtBC,KAAKC,UAAYH,EACjBE,KAAKE,YAAcH,EACnBC,KAAKG,SAAW,KAChBH,KAAKI,gBAAiB,E,2BAExBC,YAAA,WACE,IAAIC,EAAON,KAAKE,YAAcK,KAAKC,MACnC,MAAO,CACLC,KAAMC,KAAKC,MAAML,EAAO,OACxBM,MAAOF,KAAKC,MAAOL,EAAO,MAAR,MAClBO,KAAMH,KAAKC,MAAOL,EAAO,KAAR,KACjBQ,KAAMJ,KAAKC,MAAOL,EAAO,IAAe,O,EAG5CS,eAAA,WAAiB,WACXf,KAAKI,iBACPJ,KAAKI,gBAAiB,EACtBJ,KAAKG,SAAWa,aAAY,WAC1B,IAAMC,EAAU,EAAKZ,cACfa,EAAWC,SAASC,cAAc,EAAKnB,WAC7CiB,EAASE,cAAc,uBAAuBC,YAC5CJ,EAAQR,KACVS,EAASE,cAAc,wBAAwBC,YAC7CJ,EAAQL,MACVM,EAASE,cAAc,uBAAuBC,YAC5CJ,EAAQJ,KACVK,EAASE,cAAc,uBAAuBC,YAC5CJ,EAAQH,OACT,O,EAGPQ,cAAA,WACEC,cAAcvB,KAAKG,UACnBH,KAAKI,gBAAiB,G,KDjCJ,CAAmB,CACvCN,SAAU,WACVC,WAAY,IAAIQ,KAAK,kBAEvBiB,QAAQC,IAAI5B,EAAcQ,eAC1BR,EAAckB,iBACdlB,EAAckB,iBACdlB,EAAckB,iBACdW,YAAW,WACT7B,EAAcyB,kBACb,KACHI,YAAW,WACT7B,EAAckB,mBACb,O","file":"main.e7034feeddc098a14b54.js","sourcesContent":["import CountdownTimer from './CountdownTimer';\r\n\r\nconst novemberTimer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('Nov 30, 2020'),\r\n});\r\nconsole.log(novemberTimer.getDataCalc());\r\nnovemberTimer.startTimerData();\r\nnovemberTimer.startTimerData();\r\nnovemberTimer.startTimerData();\r\nsetTimeout(() => {\r\n  novemberTimer.stopTimerData();\r\n}, 5000);\r\nsetTimeout(() => {\r\n  novemberTimer.startTimerData();\r\n}, 8000);\r\n","export default class CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    this._selector = selector;\r\n    this._targetDate = targetDate;\r\n    this._timerId = null;\r\n    this._IsNoActivFlag = true;\r\n  }\r\n  getDataCalc() {\r\n    let time = this._targetDate - Date.now();\r\n    return {\r\n      days: Math.floor(time / (1000 * 60 * 60 * 24)),\r\n      hours: Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\r\n      mins: Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)),\r\n      secs: Math.floor((time % (1000 * 60)) / 1000),\r\n    };\r\n  }\r\n  startTimerData() {\r\n    if (this._IsNoActivFlag) {\r\n      this._IsNoActivFlag = false;\r\n      this._timerId = setInterval(() => {\r\n        const dataObj = this.getDataCalc();\r\n        const timerRef = document.querySelector(this._selector);\r\n        timerRef.querySelector('[data-value=\"days\"]').textContent =\r\n          dataObj.days;\r\n        timerRef.querySelector('[data-value=\"hours\"]').textContent =\r\n          dataObj.hours;\r\n        timerRef.querySelector('[data-value=\"mins\"]').textContent =\r\n          dataObj.mins;\r\n        timerRef.querySelector('[data-value=\"secs\"]').textContent =\r\n          dataObj.secs;\r\n      }, 1000);\r\n    }\r\n  }\r\n  stopTimerData() {\r\n    clearInterval(this._timerId);\r\n    this._IsNoActivFlag = true;\r\n  }\r\n}\r\n"],"sourceRoot":""}